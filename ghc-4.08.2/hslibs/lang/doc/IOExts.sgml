
<Sect1 id="sec-IOExts">
<Title><literal>IOExts</literal><IndexTerm><Primary>IOExts</Primary></IndexTerm>
</Title>

<para>
This library is the home for miscellaneous IO-related extensions.
</para>

<sect2>
<title>IO monad extensions</title>

<variableList>
<varlistentry>
<Term><literal>fixIO :: (a -> IO a) -> IO a</literal></term>
<indexterm><primary><literal>fixIO</literal></primary></indexterm>
<listitem>
<Para>
<literal>fixIO</literal> allows recursive IO operations to be defined.
The first argument to <literal>fixIO</literal> should be a function
that takes its own output as an argument (sometimes called "tying the
knot").
</Para>
</listitem>
</varlistentry>

<varlistentry>
<Term><literal>unsafePerformIO :: IO a -> a</literal></term>
<indexterm><primary><literal>unsafePerformIO</literal></primary></indexterm>
<listitem>
<para>
This is the "back door" into the <literal>IO</literal> monad, allowing
<literal>IO</literal> computation to be performed at any time.  For
this to be safe, the <literal>IO</literal> computation should be
free of side effects and independent of its environment.
</para>

<Para>
If the I/O computation wrapped in <Function>unsafePerformIO</Function>
performs side effects, then the relative order in which those side
effects take place (relative to the main I/O trunk, or other calls to
<Function>unsafePerformIO</Function>) is indeterminate.  
</para>

<para>
However, it is less well known that
<Function>unsafePerformIO</Function> is not type safe.  For example:

<ProgramListing>
test :: IORef [a]
test = unsafePerformIO $ newIORef []

main = do
        writeIORef test [42]
        bang &#60;- readIORef test
        print (bang :: [Char])
</ProgramListing>

This program will core dump.  This problem with polymorphic references is
well known in the ML community, and does not arise with normal monadic use
of references.  There is no easy way to make it impossible once you use
<Function>unsafePerformIO</Function>.  Indeed, it is possible to write
<Literal>coerce :: a -&#62; b</Literal> with the help of <Function>unsafePerformIO</Function>.
So be careful!
</Para>
</listitem>
</varlistentry>

<varlistentry>
<Term><literal>unsafeInterleaveIO :: IO a -> IO a</literal></term>
<indexterm><primary><literal>unsafeInterleaveIO</literal></primary></indexterm>
<listitem>
<Para>
<literal>unsafeInterleaveIO</literal> allows <literal>IO</literal>
computation to be deferred lazily.  When passed a value of type
<literal>IO a</literal>, the <literal>IO</literal> will only be
performed when the value of the <literal>a</literal> is demanded.
This is used to implement lazy file reading, see
<literal>IO.hGetContents</literal>.

</Para>
</listitem>
</varlistentry>
</variablelist>

</sect2>

<sect2>
<title>Mutable Variables</title>
<indexterm><primary>mutable variables</primary></indexterm>

<programlisting>
  data IORef	-- instance of: Eq
  newIORef	:: a -> IO (IORef a)
  readIORef	:: IORef a -> IO a
  writeIORef	:: IORef a -> a -> IO ()
  updateIORef	:: IORef a -> (a -> a) -> IO ()
</programlisting>
<indexterm><primary><literal>IORef</literal> type</primary></indexterm>
<indexterm><primary><literal>newIORef</literal></primary></indexterm>
<indexterm><primary><literal>readIORef</literal></primary></indexterm>
<indexterm><primary><literal>writeIORef</literal></primary></indexterm>
<indexterm><primary><literal>updateIORef</literal></primary></indexterm>

</sect2>

<sect2 id="sec-IOArray">
<title>Mutable Arrays</title>
<indexterm><primary>mutable arrays</primary></indexterm>

<programlisting>
  data IOArray	      -- instance of: Eq
  newIOArray	      :: Ix ix => (ix,ix) -> elt -> IO (IOArray ix elt)
  boundsIOArray       :: Ix ix => IOArray ix elt -> (ix, ix)
  readIOArray         :: Ix ix => IOArray ix elt -> ix -> IO elt
  writeIOArray        :: Ix ix => IOArray ix elt -> ix -> elt -> IO ()
  freezeIOArray       :: Ix ix => IOArray ix elt -> IO (Array ix elt)
  thawIOArray	      :: Ix ix => Array ix elt -> IO (IOArray ix elt)
  unsafeFreezeIOArray :: Ix ix => IOArray ix elt -> IO (Array ix elt)
  unsafeThawIOArray   :: Ix ix => Array ix elt -> IO (IOArray ix elt)
</programlisting>
<indexterm><primary><literal>IOArray</literal></primary></indexterm>
<indexterm><primary><literal>newIOArray</literal></primary></indexterm>
<indexterm><primary><literal>boundsIOArray</literal></primary></indexterm>
<indexterm><primary><literal>readIOArray</literal></primary></indexterm>
<indexterm><primary><literal>writeIOArray</literal></primary></indexterm>
<indexterm><primary><literal>freezeIOArray</literal></primary></indexterm>
<indexterm><primary><literal>thawIOArray</literal></primary></indexterm>
<indexterm><primary><literal>unsafeFreezeIOArray</literal></primary></indexterm>
<indexterm><primary><literal>unsafeThawIOArray</literal></primary></indexterm>

<para>
Note: <literal>unsafeFreezeIOArray</literal> and
<literal>unsafeThawIOArray</literal> are not provided by Hugs.
</para>

</sect2>

<sect2>
<title>Extended file modes</title>
<indexterm><primary>file modes</primary><secondary>extended</secondary></indexterm>

<programlisting>
  data IOModeEx 
   = BinaryMode IOMode
   | TextMode   IOMode
     deriving (Eq, Read, Show)

  openFileEx	     :: FilePath -> IOModeEx -> IO Handle
  hSetBinaryMode     :: Handle -> Bool -> IO Bool
</programlisting>
<indexterm><primary><literal>IOModeEx</literal></primary></indexterm>
<indexterm><primary><literal>BinaryMode</literal></primary></indexterm>
<indexterm><primary><literal>TextMode</literal></primary></indexterm>
<indexterm><primary><literal>openFileEx</literal></primary></indexterm>
<indexterm><primary><literal>hSetBinaryMode</literal></primary></indexterm>

<Para>
<Function>openFileEx</Function> extends the standard
<Function>openFile</Function> action with support for opening binary
files.
</Para>

</sect2>

<sect2 id="sec-bulk-transfers">
<title>Bulk transfers</title>
<indexterm><primary>bulk transfers</primary></indexterm>

<programlisting>
  hGetBuf       :: Handle -> Addr -> Int -> IO Int
  hGetBufFull   :: Handle -> Addr -> Int -> IO Int

  hPutBuf       :: Handle -> Addr -> Int -> IO Int
  hPutBufFull   :: Handle -> Addr -> Int -> IO ()
</programlisting>
<indexterm><primary><literal>hGetBuf</literal></primary></indexterm>
<indexterm><primary><literal>hPutBuf</literal></primary></indexterm>
<indexterm><primary><literal>hGetBufFull</literal></primary></indexterm>
<indexterm><primary><literal>hPutBufFull</literal></primary></indexterm>

<para>These functions read and write chunks of data to/from a handle.
The versions without a <literal>Full</literal> suffix may return early
if the request would have blocked; in this case they will return the
number of characters actually transfered.  The versions with a
<literal>Full</literal> suffix will return only when either the full
buffer has been transfered, or the end of file is reached (in the case
of <literal>hGetBufFull</literal>.</para>

<para>If the end of file is reached when reading, then the operation
will return a short read, and <literal>hIsEof</literal> will
henceforthe return <literal>True</literal> for the handle.  It isn't
possible to tell whether the end of file is reached using
<literal>hGetBuf</literal> alone, because a short read may indicate
blocking.</para>

<programlisting>
  hGetBufBA     :: Handle -> MutableByteArray RealWorld a -> Int -> IO Int
  hGetBufBAFull :: Handle -> MutableByteArray RealWorld a -> Int -> IO Int

  hPutBufBA     :: Handle -> MutableByteArray RealWorld a -> Int -> IO ()
  hPutBufBAFull :: Handle -> MutableByteArray RealWorld a -> Int -> IO ()
</programlisting>
<indexterm><primary><literal>hGetBufBA</literal></primary></indexterm>
<indexterm><primary><literal>hPutBufBA</literal></primary></indexterm>
<indexterm><primary><literal>hGetBufBAFull</literal></primary></indexterm>
<indexterm><primary><literal>hPutBufBAFull</literal></primary></indexterm>

<para>These (GHC-only) functions mirror the previous set of functions,
but operate on <literal>MutableByteArray</literal>s instead of
<literal>Addr</literal>s.  This may be more convenient and/or faster,
depending on the circumstances.</para>
</sect2>

<sect2>
<title>Terminal control</title>
<indexterm><primary>terminal control</primary></indexterm>

<programlisting>
  hIsTerminalDevice :: Handle -> IO Bool
  hSetEcho          :: Handle -> Bool -> IO ()
  hGetEcho          :: Handle -> IO Bool
</programlisting>
<indexterm><primary><literal>hIsTerminalDevice</literal></primary></indexterm>
<indexterm><primary><literal>hSetEcho</literal></primary></indexterm>
<indexterm><primary><literal>hGetEcho</literal></primary></indexterm>

</sect2>

<sect2>
<title>Redirecting handles</title>

<programlisting>
  withHandleFor :: Handle -> Handle -> IO a -> IO a
  withStdout    :: IO a -> IO a
  withStdin     :: IO a -> IO a
  withStderr    :: IO a -> IO a
</programlisting>
<indexterm><primary><literal>withHandleFor</literal></primary></indexterm>
<indexterm><primary><literal>withStdout</literal></primary></indexterm>
<indexterm><primary><literal>withStdin</literal></primary></indexterm>
<indexterm><primary><literal>withStderr</literal></primary></indexterm>

</sect2>

<sect2 id="trace">
<title>Trace</title>

<programlisting>
trace :: String -> a -> a
</programlisting>
<indexterm><primary><literal>trace</literal></primary></indexterm>

<Para>
When called, <Function>trace</Function> prints the string in its first
argument to standard error, before returning the second argument as
its result.  The <Function>trace</Function> function is not
referentially transparent, and should only be used for debugging, or
for monitoring execution. Some implementations of
<Function>trace</Function> may decorate the string that's output to
indicate that you're tracing.
</para>

<para>
<literal>trace</literal> is implemented using
<literal>unsafePerformIO</literal>.
</para>

<!--
  You should also be warned that, unless you understand some of the
  details about the way that Haskell programs are executed, results
  obtained using <tt/trace/ can be rather confusing.  For example, the
  messages may not appear in the order that you expect.  Even ignoring the
  output that they produce, adding calls to <tt/trace/ can change the
  semantics of your program.  Consider this a warning!
  -->

</sect2>

<sect2>
<title>Miscellany</title>

<programlisting>
  mkWeakIORef            :: IORef a -> IO () -> IO (Weak (IORef a))
  unsafePtrEq		 :: a -> a -> Bool
  slurpFile              :: FilePath -> IO (Addr, Int)
  hConnectTo             :: Handle -> Handle -> IO ()
  performGC              :: IO ()
  freeHaskellFunctionPtr :: Addr -> IO ()
</programlisting>
<indexterm><primary><literal>mkWeakIORef</literal></primary></indexterm>
<indexterm><primary><literal>unsafePtrEq</literal></primary></indexterm>
<indexterm><primary><literal>slurpFile</literal></primary></indexterm>
<indexterm><primary><literal>hConnectTo</literal></primary></indexterm>
<indexterm><primary><literal>performGC</literal></primary></indexterm>
<indexterm><primary><literal>freeHaskellFunctionPtr</literal></primary></indexterm>

<Para>
<Function>performGC</Function> triggers an immediate garbage collection
</Para>

<Para>
<Function>unsafePtrEq</Function> compares two values for pointer equality without
evaluating them.  The results are not referentially transparent and
may vary significantly from one compiler to another or in the face of
semantics-preserving program changes.  However, pointer equality is useful
in creating a number of referentially transparent constructs such as this
simplified memoisation function:

<ProgramListing>
&#62; cache :: (a -&#62; b) -&#62; (a -&#62; b)
&#62; cache f = \x -&#62; unsafePerformIO (check x)
&#62;  where
&#62;   ref = unsafePerformIO (newIORef (error "cache", error "cache"))
&#62;   check x = readIORef ref &#62;&#62;= \ (x',a) -&#62;
&#62;	       if x `unsafePtrEq` x' then
&#62;		 return a
&#62;	       else
&#62;		 let a = f x in
&#62;		 writeIORef ref (x, a) &#62;&#62;
&#62;		 return a
</ProgramListing>


</Para>

</sect2>

</Sect1>

<!-- Emacs stuff:
     ;;; Local Variables: ***
     ;;; mode: sgml ***
     ;;; sgml-parent-document: ("../../doc/hslibs.sgml" "book" "chapter" "sect1") ***
     ;;; End: ***
 -->
