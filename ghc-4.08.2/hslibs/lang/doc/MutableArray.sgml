<Sect1 id="MutableArray">
<Title><literal>MutableArray</literal><IndexTerm><Primary>MutableArray</Primary></IndexTerm>
</Title>

  <para>NOTE: The <literal>MutableArray</literal> interface is
  deprecated, please use <literal>MArray</literal> (<xref
  linkend="sec-MArray">) instead.</para>

<Para>
The <Literal>MutableArray</Literal> interface provide operations for reading and
writing values to mutable arrays. There's two kinds of
mutable arrays, the mutatable version of Haskell <Literal>Array</Literal>s
and <Emphasis>mutable byte arrays</Emphasis>, chunks of memory containing
values of some basic type.
</Para>

<Sect2 id="MutableArray-mutable-arrays">
<Title>Mutable arrays
<IndexTerm><Primary>Mutable arrays</Primary></IndexTerm>
</Title>

<Para>
The mutable array section of the API provides the following
operations:
</Para>

<Para>
<ProgramListing>

-- mutable arrays:
newArray      :: Ix ix -&#62; (ix,ix) -&#62; elt -&#62; ST s (MutableArray s ix elt)
boundsOfArray :: Ix ix =&#62; MutableArray s ix elt -&#62; (ix, ix)
readArray     :: Ix ix =&#62; MutableArray s ix elt -&#62; ix -&#62; ST s elt
writeArray    :: Ix ix =&#62; MutableArray s ix elt -&#62; ix -&#62; elt -&#62; ST s ()
freezeArray   :: Ix ix =&#62; MutableArray s ix elt -&#62; ST s (Array ix elt)
thawArray     :: Ix ix =&#62; Array ix elt -&#62; ST s (MutableArray s ix elt)

unsafeFreezeArray   :: Ix ix =&#62; MutableArray s ix elt -&#62; ST s (Array ix elt)
unsafeThawArray     :: Ix ix =&#62; Array ix elt -&#62; ST s (MutableArray s ix elt)
</ProgramListing>

<IndexTerm><Primary>newArray</Primary></IndexTerm>
<IndexTerm><Primary>boundsOfArray</Primary></IndexTerm>
<IndexTerm><Primary>readArray</Primary></IndexTerm>
<IndexTerm><Primary>writeArray</Primary></IndexTerm>
<IndexTerm><Primary>freezeArray</Primary></IndexTerm>
<IndexTerm><Primary>thawArray</Primary></IndexTerm>
<IndexTerm><Primary>unsafeFreezeArray</Primary></IndexTerm>
<IndexTerm><Primary>unsafeThawArray</Primary></IndexTerm>
</Para>

<Para>
<Emphasis>Remarks:</Emphasis>
</Para>

<Para>

<ItemizedList>
<ListItem>

<Para>
The <Function>freezeArray</Function> action converts a mutable array into an
immutable one by copying, whereas <Function>unsafeFreezeArray</Function> returns
an immutable array that is effectively just the type cast version
of the mutable array. Should you write to the mutable array after
it has been (unsafely) frozen, you'll side-effect the immutable
array in the process. Please don't :-)

</Para>
</ListItem>
<ListItem>

<Para>
The operation <Function>thawArray</Function> goes the other way, converting
an immutable <Literal>Array</Literal> into a mutable one. This is done by
copying. The operation <Function>unsafeThawArray</Function> is also provided,
which places the same kind of proof obligation on the programmer
as <Function>unsafeFreezeArray</Function> does.
</Para>
</ListItem>

</ItemizedList>

</Para>

</Sect2>

<Sect2 id="MutableArray-mutable-byte-arrays">
<Title>Mutable byte arrays
<IndexTerm><Primary>Mutable byte arrays</Primary></IndexTerm>
</Title>

<Para>
<ProgramListing>
-- creators:
newCharArray      :: Ix ix =&#62; (ix,ix) -&#62; ST s (MutableByteArray s ix)
newAddrArray      :: Ix ix =&#62; (ix,ix) -&#62; ST s (MutableByteArray s ix)
newIntArray       :: Ix ix =&#62; (ix,ix) -&#62; ST s (MutableByteArray s ix)
newWordArray      :: Ix ix =&#62; (ix,ix) -&#62; ST s (MutableByteArray s ix)
newFloatArray     :: Ix ix =&#62; (ix,ix) -&#62; ST s (MutableByteArray s ix)
newDoubleArray    :: Ix ix =&#62; (ix,ix) -&#62; ST s (MutableByteArray s ix)
newStablePtrArray :: Ix ix =&#62; (ix,ix) -&#62; ST s (MutableByteArray s ix)

boundsOfMutableByteArray
                   :: Ix ix =&#62; MutableByteArray s ix -&#62; (ix, ix)

readCharArray      :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Char
readIntArray       :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Int
readAddrArray      :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Addr
readFloatArray     :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Float
readDoubleArray    :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Double
readStablePtrArray :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s (StablePtr a)
readWord8Array	   :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Word8
readWord16Array	   :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Word16
readWord32Array	   :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Word32
readWord64Array	   :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Word64
readInt8Array	   :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Int8
readInt16Array	   :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Int16
readInt32Array	   :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Int32
readInt64Array	   :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; ST s Int64

writeCharArray        :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Char -&#62; ST s ()
writeIntArray         :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Int  -&#62; ST s ()
writeAddrArray        :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Addr -&#62; ST s ()
writeFloatArray       :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Float -&#62; ST s ()
writeDoubleArray      :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Double -&#62; ST s ()
writeStablePtrArray   :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; StablePtr a -&#62; ST s ()
writeWord8Array	      :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Word8  -&#62; ST s ()
writeWord16Array      :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Word16 -&#62; ST s ()
writeWord32Array      :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Word32 -&#62; ST s ()
writeWord64Array      :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Word64 -&#62; ST s ()
writeInt8Array	      :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Int8  -&#62; ST s ()
writeInt16Array       :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Int16 -&#62; ST s ()
writeInt32Array	      :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Int32 -&#62; ST s ()
writeInt64Array	      :: Ix ix =&#62; MutableByteArray s ix -&#62; ix -&#62; Int64 -&#62; ST s ()

freezeByteArray       :: Ix ix =&#62; MutableByteArray s ix -&#62; ST s (ByteArray ix)
unsafeFreezeByteArray  :: Ix ix =&#62; MutableByteArray s ix -&#62; ST s (ByteArray ix)

sizeofMutableByteArray :: Ix ix =&#62; MutableByteArray s ix -&#62; Int

thawByteArray       :: Ix ix =&#62; ByteArray ixt -&#62; ST s (MutableByteArray s ix)
unsafeThawByteArray :: Ix ix =&#62; ByteArray ixt -&#62; ST s (MutableByteArray s ix)
</ProgramListing>

<IndexTerm><Primary>newCharArray</Primary></IndexTerm>
<IndexTerm><Primary>newAddrArray</Primary></IndexTerm>
<IndexTerm><Primary>newIntArray</Primary></IndexTerm>
<IndexTerm><Primary>newFloatArray</Primary></IndexTerm>
<IndexTerm><Primary>newDoubleArray</Primary></IndexTerm>
<IndexTerm><Primary>boundsOfMutableByteArray</Primary></IndexTerm>
<IndexTerm><Primary>readCharArray</Primary></IndexTerm>
<IndexTerm><Primary>readIntArray</Primary></IndexTerm>
<IndexTerm><Primary>readAddrArray</Primary></IndexTerm>
<IndexTerm><Primary>readFloatArray</Primary></IndexTerm>
<IndexTerm><Primary>readDoubleArray</Primary></IndexTerm>
<IndexTerm><Primary>readWord8Array</Primary></IndexTerm>
<IndexTerm><Primary>readWord16Array</Primary></IndexTerm>
<IndexTerm><Primary>readWord32Array</Primary></IndexTerm>
<IndexTerm><Primary>readWord64Array</Primary></IndexTerm>
<IndexTerm><Primary>readInt8Array</Primary></IndexTerm>
<IndexTerm><Primary>readInt16Array</Primary></IndexTerm>
<IndexTerm><Primary>readInt32Array</Primary></IndexTerm>
<IndexTerm><Primary>readInt64Array</Primary></IndexTerm>
<IndexTerm><Primary>writeCharArray</Primary></IndexTerm>
<IndexTerm><Primary>writeIntArray</Primary></IndexTerm>
<IndexTerm><Primary>writeAddrArray</Primary></IndexTerm>
<IndexTerm><Primary>writeFloatArray</Primary></IndexTerm>
<IndexTerm><Primary>writeDoubleArray</Primary></IndexTerm>
<IndexTerm><Primary>writeWord8Array</Primary></IndexTerm>
<IndexTerm><Primary>writeWord16Array</Primary></IndexTerm>
<IndexTerm><Primary>writeWord32Array</Primary></IndexTerm>
<IndexTerm><Primary>writeWord64Array</Primary></IndexTerm>
<IndexTerm><Primary>writeInt8Array</Primary></IndexTerm>
<IndexTerm><Primary>writeInt16Array</Primary></IndexTerm>
<IndexTerm><Primary>writeInt32Array</Primary></IndexTerm>
<IndexTerm><Primary>writeInt64Array</Primary></IndexTerm>
<IndexTerm><Primary>freezeByteArray</Primary></IndexTerm>
<IndexTerm><Primary>unsafeFreezeByteArray</Primary></IndexTerm>
<IndexTerm><Primary>unsafeThawByteArray</Primary></IndexTerm>
<IndexTerm><Primary>thawByteArray</Primary></IndexTerm>
</Para>

<Para>
<Emphasis>Remarks:</Emphasis>

<ItemizedList>
<ListItem>

<Para>
A Mutable byte array is created by specifying its size in units of
some basic type. For example,


<ProgramListing>
mkPair :: ST s (MutableByteArray s Int)
mkPair = newIntArray (0,1)
</ProgramListing>


creates a mutable array capable of storing two <Literal>Int</Literal>s. Notice
that the range size <Emphasis>is not in bytes</Emphasis>, but in units of the
basic type.

</Para>
</ListItem>
<ListItem>

<Para>
A mutable byte array is not parameterised over the kind of values
it contains. A consequence of this is that it is possible to
have byte arrays containing a mix of basic types, or even read
a value from the array at a different type from which it was
written, e.g.,

<ProgramListing>
isLitteEndian :: IO Bool
isLitteEndian = stToIO $ do
   x &#60;- newIntArray (0,1)
   writeIntArray x 1
   v &#60;- readCharArray x 0
   return (v == chr 1)
</ProgramListing>


It's left as an exercise for the reader to determine whether having
byte arrays not be parameterised over the type of values they
contain is a bug or a feature..

</Para>
</ListItem>
<ListItem>
<Para>
As for mutable arrays, operations for turning mutable byte arrays
into immutable byte arrays are also provided by the <Function>freeze*</Function>
class of actions. There's also the non-copying
<Function>unsafeFreezeByteArray</Function>.
</Para>
</ListItem>
<ListItem>

<Para>
Operations for going the other way, where an immutable byte
array is 'thawed' are also provided. <Function>thawByteArray</Function> does
this by copying, whereas <Function>unsafeThawByteArray</Function> does not

</Para>
</ListItem>
<ListItem>

<Para>
The operation <Function>sizeofMutableByteArray</Function> returns the size of
the array, <Emphasis>in bytes.</Emphasis>
</Para>
</ListItem>

</ItemizedList>

</Para>

</Sect2>

</Sect1>
