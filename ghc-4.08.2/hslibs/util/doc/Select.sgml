<Sect1 id="Select">
<Title><Literal>Select</Literal>: Synchronous I/O multiplexing
<IndexTerm><Primary>Select interface</Primary></IndexTerm>
</Title>

<Para>
The <Literal>Select</Literal> interface provides a Haskell wrapper for the <Function>select()</Function>
OS call supplied by many modern UNIX variants. <Literal>Select</Literal> exports the
following:
</Para>

<Para>

<ProgramListing>
type TimeOut = Maybe Int
  -- Nothing =&#62; wait indefinitely.
  -- Just x | x &#62;= 0    =&#62; block waiting for 'x' micro seconds.
  --        | otherwise =&#62; block waiting for '-x' micro seconds.

hSelect :: [Handle]
        -&#62; [Handle]
        -&#62; [Handle]
        -&#62; TimeOut
        -&#62; IO SelectResult

type SelectResult
 = ( [Handle]  -- input  handles ready
   , [Handle]  -- output handles ready
   , [Handle]  -- exc.   handles ready
   )
</ProgramListing>

</Para>

<Para>
Here's an example of how it could be used:
</Para>

<Para>

<ProgramListing>
module Main(main) where

import Select
import IO

main :: IO ()
main = do
  hSetBuffering stdin NoBuffering
  putStrLn "waiting for input to appear"
  hSelect [stdin] [] [] Nothing
  putStrLn "input ready, let's try reading"
  x &#60;- getChar
  print x
</ProgramListing>

</Para>

<Para>
where the call to <Function>hSelect</Function> makes the process go to sleep
until there's input available on <VarName>stdin</VarName>.
</Para>

<Para>
Notice that this particular use of <Function>hSelect</Function> is now really a no-op
with GHC compiled code, as its implementation of IO will take care to
avoid blocking the process (i.e., all running Haskell threads), and
call <Function>select()</Function> for you, if needs be. However, <Function>hSelect</Function> exposes
functionality that is useful in other contexts (e.g., you want to
wait for input on two <Literal>Handles</Literal> for 3 seconds, but no longer.)
</Para>

</Sect1>
