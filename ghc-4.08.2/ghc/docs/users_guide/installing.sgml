<Chapter id="sec-installing-bin-distrib">
<Title>Installing from binary distributions</Title>
<IndexTerm><Primary>binary installations</Primary></IndexTerm>
<IndexTerm><Primary>installation, of binaries</Primary></IndexTerm>

<Para>
Installing from binary distributions is easiest, and recommended!
(Why binaries? Because GHC is a Haskell compiler written in Haskell,
so you've got to bootstrap it somehow.  We provide
machine-generated C-files-from-Haskell for this purpose, but it's
really quite a pain to use them.  If you must build GHC from its
sources, using a binary-distributed GHC to do so is a sensible way to
proceed. For the other <Literal>fptools</Literal> programs, many are written in Haskell, so binary distributions allow you to install them without having a Haskell compiler.)
</Para>

<Para>This guide is in two parts: installing on Unix-a-likes, and installing on Windows.</Para>


<Sect1><Title>Installing on Unix-a-likes</Title>

<Sect2>
<Title>Bundle structure</Title>

<Para>
<IndexTerm><Primary>bundles of binary stuff</Primary></IndexTerm>
</Para>

<Para>
Binary distributions come in &ldquo;bundles,&rdquo; one bundle per file called
<Literal>&lt;bundle&gt;-&lt;platform&gt;.tar.gz</Literal>.  (See the building guide for the definition of a platform.)  Suppose that you untar a binary-distribution bundle, thus:
</Para>

<Para>

<Screen>
% cd /your/scratch/space
% gunzip &#60; ghc-x.xx-sun-sparc-solaris2.tar.gz | tar xvf -</Screen>

</Para>

<Para>
Then you should find a single directory, <Literal>fptools</Literal>, with the following
structure:
</Para>

<Para>
<IndexTerm><Primary>binary distribution, layout</Primary></IndexTerm>
<IndexTerm><Primary>directory layout (binary distributions)</Primary></IndexTerm>
<VariableList>

<VarListEntry>
<Term><Literal>Makefile.in</Literal></Term>
<ListItem>
<Para>
the raw material from which the <Literal>Makefile</Literal>
will be made (<Xref LinkEnd="sec-install">).
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>configure</Literal></Term>
<ListItem>
<Para>
the configuration script (<Xref LinkEnd="sec-install">).
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>README</Literal></Term>
<ListItem>
<Para>
Contains this file summary.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>INSTALL</Literal></Term>
<ListItem>
<Para>
Contains this description of how to install
the bundle.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>ANNOUNCE</Literal></Term>
<ListItem>
<Para>
The announcement message for the bundle.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>NEWS</Literal></Term>
<ListItem>
<Para>
release notes for the bundle&mdash;a longer version
of <Literal>ANNOUNCE</Literal>.  For GHC, the release notes are contained in the User
Guide and this file isn't present.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>bin/&lt;platform&gt;</Literal></Term>
<ListItem>
<Para>
contains platform-specific executable
files to be invoked directly by the user.  These are the files that
must end up in your path.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>lib/&lt;platform&gt;/</Literal></Term>
<ListItem>
<Para>
contains platform-specific support
files for the installation.  Typically there is a subdirectory for
each <Literal>fptools</Literal> project, whose name is the name of the project with its
version number.  For example, for GHC there would be a sub-directory
<Literal>ghc-x.xx</Literal>/ where <Literal>x.xx</Literal> is the version number of GHC in the bundle.
</Para>

<Para>
These sub-directories have the following general structure:
</Para>

<Para>
<VariableList>

<VarListEntry>
<Term><Literal>libHSstd.a</Literal> etc:</Term>
<ListItem>
<Para>
supporting library archives.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>ghc-iface.prl</Literal> etc:</Term>
<ListItem>
<Para>
support scripts.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>import/</Literal></Term>
<ListItem>
<Para>
<IndexTerm><Primary>Interface files</Primary></IndexTerm> (<Literal>.hi</Literal>) for the prelude.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>include/</Literal></Term>
<ListItem>
<Para>
A few C <Literal>&num;include</Literal> files.
</Para>
</ListItem></VarListEntry>
</VariableList>
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>share/</Literal></Term>
<ListItem>
<Para>
contains platform-independent support files
for the installation.  Again, there is a sub-directory for each
<Literal>fptools</Literal> project.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>html/</Literal></Term>
<ListItem>
<Para>
contains HTML documentation files (one
sub-directory per project).
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>man/</Literal></Term>
<ListItem>
<Para>
contains Unix manual pages.
</Para>
</ListItem></VarListEntry>
</VariableList>
</Para>

<Para>
This structure is designed so that you can unpack multiple bundles
(including ones from different releases or platforms) into a single
<Literal>fptools</Literal> directory
<FOOTNOTE>

<Para>
this doesn't work at the
moment
</Para>

</FOOTNOTE>
:
</Para>

<Para>

<Screen>
% cd /your/scratch/space
% gunzip &#60; ghc-x.xx-sun-sparc-solaris2.tar.gz | tar xvf -
% gunzip &#60; happy-x.xx-sun-sparc-sunos4.tar.gz | tar xvf -</Screen>

</Para>

<Para>
When you do multiple unpacks like this, the top level <Literal>Makefile</Literal>,
<Literal>README</Literal>, and <Literal>INSTALL</Literal> get overwritten each time.
That's fine&mdash;they should be the same.  Likewise, the
<Literal>ANNOUNCE-&lt;bundle&gt;</Literal> and <Literal>NEWS-&lt;bundle&gt;</Literal>
files will be duplicated across multiple platforms, so they will be
harmlessly overwritten when you do multiple unpacks.  Finally, the
<Literal>share/</Literal> stuff will get harmlessly overwritten when you do
multiple unpacks for one bundle on different platforms.
</Para>

<Sect3 id="sec-install">
<Title>Installing</Title>

<Para>
OK, so let's assume that you have unpacked your chosen bundles into a
scratch directory <Literal>fptools</Literal>. What next? Well, you will at least need
to run the <Literal>configure</Literal><IndexTerm><Primary>configure</Primary></IndexTerm> script by changing your
directory to <Literal>fptools</Literal> and typing <Literal>./configure</Literal>.  That should convert
<Literal>Makefile.in</Literal> to <Literal>Makefile</Literal>.
</Para>

<Para>
<IndexTerm><Primary>installing in-place</Primary></IndexTerm>
<IndexTerm><Primary>in-place installation</Primary></IndexTerm>
You can now either start using the tools <Emphasis>in-situ</Emphasis> without going
through any installation process, just type <Literal>make in-place</Literal> to set the
tools up for this. You'll also want to add the path which <Literal>make</Literal> will
now echo to your <Literal>PATH</Literal> environment variable. This option is useful if
you simply want to try out the package and/or you don't have the
necessary privileges (or inclination) to properly install the tools
locally. Note that if you do decide to install the package `properly'
at a later date, you have to go through the installation steps that
follows.
</Para>

<Para>
To install an <Literal>fptools</Literal> package, you'll have to do the following:
</Para>

<Para>

<OrderedList>
<ListItem>

<Para>
 Edit the <Literal>Makefile</Literal> and check the settings of the following variables:

<IndexTerm><Primary>directories, installation</Primary></IndexTerm>
<IndexTerm><Primary>installation directories</Primary></IndexTerm>

<VariableList>

<VarListEntry>
<Term><Literal>platform</Literal></Term>
<ListItem>
<Para>
the platform you are going to install for.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>bindir</Literal></Term>
<ListItem>
<Para>
the directory in which to install user-invokable
binaries.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>libdir</Literal></Term>
<ListItem>
<Para>
the directory in which to install
platform-dependent support files.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>datadir</Literal></Term>
<ListItem>
<Para>
the directory in which to install
platform-independent support files.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>infodir</Literal></Term>
<ListItem>
<Para>
the directory in which to install Emacs info
files.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>htmldir</Literal></Term>
<ListItem>
<Para>
the directory in which to install HTML
documentation.
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>dvidir</Literal></Term>
<ListItem>
<Para>
the directory in which to install DVI
documentation.
</Para>
</ListItem></VarListEntry>
</VariableList>

The values for these variables can be set through invocation of the
<Command>configure</Command><IndexTerm><Primary>configure</Primary></IndexTerm>
script that comes with the distribution, but doing an optical diff to
see if the values match your expectations is always a Good Idea.
</para>

<para>
<Emphasis>Instead of running <Command>configure</Command>, it is
perfectly OK to copy <Filename>Makefile.in</Filename> to
<Filename>Makefile</Filename> and set all these variables directly
yourself.  But do it right!</Emphasis>
</Para>

</ListItem>
<ListItem>

<Para>
Run <Literal>make install</Literal>.  This <Emphasis>
should</Emphasis> work with ordinary Unix
<Literal>make</Literal>&mdash;no need for fancy stuff like GNU
<Literal>make</Literal>.

</Para>
</ListItem>
<ListItem>

<Para>
<Literal>rehash</Literal> (t?csh or zsh users), so your shell will see the new
stuff in your bin directory.

</Para>
</ListItem>
<ListItem>

<Para>
 Once done, test your &ldquo;installation&rdquo; as suggested in 
<XRef LinkEnd="sec-GHC-test">.  Be sure to use a <Literal>-v</Literal>
option, so you can see exactly what pathnames it's using.

If things don't work as expected, check the list of known pitfalls in
the building guide.
</Para>
</ListItem>

</OrderedList>

</Para>

<Para>
<IndexTerm><Primary>link, installed as ghc</Primary></IndexTerm>
When installing the user-invokable binaries, this installation
procedure will install GHC as <Literal>ghc-x.xx</Literal> where <Literal>x.xx</Literal> is the version
number of GHC.  It will also make a link (in the binary installation
directory) from <Literal>ghc</Literal> to <Literal>ghc-x.xx</Literal>.  If you install multiple versions
of GHC then the last one &ldquo;wins&rdquo;, and &ldquo;<Literal>ghc</Literal>&rdquo; will invoke the last
one installed.  You can change this manually if you want.  But
regardless, <Literal>ghc-x.xx</Literal> should always invoke GHC version <Literal>x.xx</Literal>.
</Para>

</Sect3>


<Sect3>
<Title>What bundles there are</Title>

<Para>
<IndexTerm><Primary>bundles, binary</Primary></IndexTerm>
There are plenty of &ldquo;non-basic&rdquo; GHC bundles.  The files for them are
called <Literal>ghc-x.xx-&lt;bundle&gt;-&lt;platform&gt;.tar.gz</Literal>, where
the <Literal>&lt;platform&gt;</Literal> is as above, and <Literal>&lt;bundle&gt;</Literal> is one
of these:
</Para>

<Para>
<VariableList>

<VarListEntry>
<Term><Literal>prof</Literal>:</Term>
<ListItem>
<Para>
Profiling with cost-centres.  You probably want this.
<IndexTerm><Primary>profiling bundles</Primary></IndexTerm>
<IndexTerm><Primary>bundles, profiling</Primary></IndexTerm>
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>par</Literal>:</Term>
<ListItem>
<Para>
Parallel Haskell features (sits on top of PVM).
You'll want this if you're into that kind of thing.
<IndexTerm><Primary>parallel bundles</Primary></IndexTerm>
<IndexTerm><Primary>bundles, parallel</Primary></IndexTerm>
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>gran</Literal>:</Term>
<ListItem>
<Para>
The &ldquo;GranSim&rdquo; parallel-Haskell simulator
(hmm&hellip; mainly for implementors).
<IndexTerm><Primary>bundles, gransim</Primary></IndexTerm>
<IndexTerm><Primary>gransim bundles</Primary></IndexTerm>
</Para>
</ListItem></VarListEntry>
<VarListEntry>
<Term><Literal>ticky</Literal>:</Term>
<ListItem>
<Para>
&ldquo;Ticky-ticky&rdquo; profiling; very detailed
information about &ldquo;what happened when I ran this program&rdquo;&mdash;really
for implementors.
<IndexTerm><Primary>bundles, ticky-ticky</Primary></IndexTerm>
<IndexTerm><Primary>ticky-ticky bundles</Primary></IndexTerm>
</Para>
</ListItem></VarListEntry>
</VariableList>
</Para>

<Para>
One likely scenario is that you will grab <Emphasis>two</Emphasis>
binary bundles&mdash;basic, and profiling.  We don't usually make the
rest, although you can build them yourself from a source distribution.
</Para>

</Sect3>

<Sect3 id="sec-GHC-test">
<Title>Testing that GHC seems to be working
</Title>

<Para>
<IndexTerm><Primary>testing a new GHC</Primary></IndexTerm>
</Para>

<Para>
The way to do this is, of course, to compile and run <Emphasis>this</Emphasis> program
(in a file <Literal>Main.hs</Literal>):
</Para>

<Para>

<ProgramListing>
main = putStr "Hello, world!\n"
</ProgramListing>

</Para>

<Para>
Compile the program, using the <Literal>-v</Literal> (verbose) flag to verify that
libraries, etc., are being found properly:

<Screen>
% ghc -v -o hello Main.hs</Screen>

</Para>

<Para>
Now run it:

<Screen>
% ./hello
Hello, world!</Screen>

</Para>

<Para>
Some simple-but-profitable tests are to compile and run the notorious
<Literal>nfib</Literal><IndexTerm><Primary>nfib</Primary></IndexTerm> program, using different numeric types.  Start with
<Literal>nfib :: Int -&gt; Int</Literal>, and then try <Literal>Integer</Literal>, <Literal>Float</Literal>, <Literal>Double</Literal>,
<Literal>Rational</Literal> and perhaps the overloaded version.  Code for this is
distributed in <Literal>ghc/misc/examples/nfib/</Literal> in a source distribution.
</Para>

<Para>
For more information on how to &ldquo;drive&rdquo; GHC, either do <Literal>ghc -help</Literal> or
consult the User's Guide (distributed in several pre-compiled formats
with a binary distribution, or in source form in
<Literal>ghc/docs/users&lowbar;guide</Literal> in a source distribution).
</Para>

</Sect3>

</Sect2>

</Sect1>


<Sect1 id="sec-install-windows"><Title>Installing on Windows</Title>

<Para>
Getting the Glasgow Haskell Compiler (GHC) to run on Windows platforms can
be a bit of a trying experience. This document tries to simplify the task by
enumerating the steps you need to follow in order to set up and configure
your machine to run GHC.
</Para>

<Sect2><Title>System requirements</Title>

<Para>
An installation of GHC requires about 50M of disk space (which can be
lowered by choosing a &ldquo;compact&rdquo; installation). The Cygwin
support tools take another 200M or so (though if you really need to this can
be halved by installing only the following packages: bash, binutils, cygwin,
diff, fileutils, findutils, gcc, grep, make, perl, mingw, sed, textutils,
w32api; however, it's fiddly and not recommended, and if you're trying to
build rather than just use GHC, you need many more, so you might as well
install the lot). To run GHC
comfortably, your machine should have at least 64M of memory.
</Para>

</Sect2>


<Sect2 id="sec-required"><Title>Software required</Title>

<Para>
You need two chunks of software other than GHC itself: the Cygwin toolchain, and Perl.  Here's how to get and install them.
</Para>

<Sect3><Title>The Cygwin toolchain (1.1.x)</Title>

<Para>
At the moment you'll need Cygwin to use GHC. Cygwin dresses up the Win32
environment into something more UNIX-like; (notably, it provides
<Command>gcc</Command>, <Command>as</Command> and <Command>ld</Command>).
You also need Cygwin to use CVS.
</Para>

<Para>
Important grungy information about Cygwin:
</Para>

<ItemizedList>

<ListItem>
<Para>
Cygwin doesn't deal well with filenames that include
spaces. "<Filename>Program Files</Filename>" and "<Filename>Local files</Filename>" are
common gotchas.
</Para>
</ListItem>

<ListItem>
<Para>
Cygwin implements a symbolic link as a text file with some
magical text in it.  So programs that don't use Cygwin's
I/O libraries won't recognise such files as symlinks.  
In particular, programs compiled by GHC are meant to be runnable
without having Cygwin, so they don't use the Cygwin library, so
they don't recognise symlinks.
</Para>
</ListItem>

</ItemizedList>

<Para>
Here's how to install Cygwin.
</Para>

<ItemizedList>

<ListItem>
<Para>
Install the latest Cygwin 1.1.x from <ULink
URL="http://sources.redhat.com/cygwin/">sources.redhat.com/cygwin</ULink>.
If you have a pre-1.1 version, you should deinstall this first. Choose DOS
text mode. After installation, start up a Cygwin shell and issue the
following command:

<Screen>
mount -f c: /</Screen>

assuming you installed Cygwin at <Filename>C:\cygwin</Filename>; otherwise
change the drive and directory as appropriate.
</Para>
</ListItem>

<ListItem>
<Para>
Create <Filename>C:/Temp</Filename> if it doesn't already exist; substitute
the drive you installed Cygwin on for <Filename>C:</Filename>).
</Para>
</ListItem>

<ListItem>
<Para>
If you're an Emacs user and want to be able to run <Command>bash</Command>
from within a shell buffer, see the <ULink URL="http://www.cs.washington.edu/homes/voelker/ntemacs.html">NT Emacs home page</ULink> for
instructions on how to set this up.
</Para>
</ListItem>

<ListItem>
<Para>
For reasons as yet not understood, as of January 2001 Cygwin's mingw
package has a problem that causes GHC-compiled binaries to be built
incorrectly. The fix is to ensure that your mingw package is dated 20001111
(you can set this in the Cygwin installer). We're not sure if this is due to
a bug in the mingw package, or a breaking change; if the latter, we'll issue
a new InstallShield in a little while that works.
</Para>
</ListItem>

</ItemizedList>

</Sect3>


<Sect3><Title>Environment variables</Title>

<Para>
In case you don't already know how to set environment variables on a Windows
machine, here's how. On WinNT/Win2k, to edit your <Constant>PATH</Constant>
variable (for example), do the following:
</Para>

<ItemizedList>
<ListItem><Para>Press Start/Settings/Control Panels</Para></ListItem>
<ListItem><Para>Double-click System</Para></ListItem>
<ListItem><Para>Press Advanced</Para></ListItem>
<ListItem><Para>Press Environment Variables</Para></ListItem>
<ListItem><Para>Under System Variables, select <Constant>PATH</Constant></Para></ListItem>
<ListItem><Para>Press Edit</Para></ListItem>
<ListItem><Para>Add "<Filename>;C:\whatever</Filename>" to the end of the string (for example)</Para></ListItem>
<ListItem><Para>Press OK</Para></ListItem>
</ItemizedList>

<Para>
Some environment variables are &ldquo;user variables&rdquo; and
some are &ldquo;system variables&rdquo;.  I'm not sure of the difference
but both are changed though the same dialogue.
</Para>

<Para>
In addition, when running <Command>bash</Command>
you can set environment variables in your <Filename>.bashrc</Filename> file.
But it is better to set your environment variables from the
control panel (they get inherited by bash) because then they are visible
to applications that aren't started by bash.  For example,
when you're invoking CVS (and ssh) via Emacs keybindings;
it invokes <Filename>cvs.exe</Filename> without going via bash.
</Para>

<Para>
On a Win9x machine you need to edit <Filename>autoexec.bat</Filename> using
<Filename>Windows/System/Sysedit</Filename>.  You must reboot to make
the new settings take effect.
</Para>

<Para>
The following environment variables must be set:
</Para>

<Para>
<InformalTable>
<TGroup cols="2">
<ColSpec Align="Left" Colsep="0">
<ColSpec Align="Left" Colsep="0">
<TBody>

<Row>
<Entry><Constant>PATH</Constant></Entry>
<Entry>System</Entry>
<Entry><Para>
Add <Filename>C:\usr\bin</Filename>.
This should come <Emphasis>before</Emphasis> the Windows system directories
(e.g. <Filename>\WINNT\system32</Filename>).
</Para></Entry>
</Row>

<Row>
<Entry><Constant>SHELL</Constant></Entry>
<Entry>User</Entry>
<Entry><Para>
<Filename>C:/usr/bin/bash</Filename>.
</Para></Entry>
</Row>

<Row>
<Entry><Constant>HOME</Constant></Entry>
<Entry>User</Entry>
<Entry><Para>
Set to point to your home directory (normally under
<Filename>C:/WINNT/Profiles</Filename> on Win2k).  This is where, for example,
<Command>bash</Command> will look for your <Filename>.bashrc</Filename>
file.
</Para></Entry>
</Row>

<Row>
<Entry><Constant>MAKE_MODE</Constant></Entry>
<Entry>User</Entry>
<Entry><Para>
Set to <Literal>UNIX</Literal>.  If you don't do
this you get very weird messages when you type <Command>make</Command>, such as:
</Para><Screen>
/c: /c: No such file or directory</Screen></Entry>
</Row>

<Row>
<Entry><Constant>TMPDIR</Constant></Entry>
<Entry>User</Entry>
<Entry><Para>
Set to <Filename>C:/Temp</Filename>. For some reason, Win2k invisibly sets this variable to point to a temporary directory in your profile, that contains embedded spaces.  If GHC sees the <Constant>TMPDIR</Constant> variable set, it tries to use it for temporary files, but Cygwin doesn't grok filenames with spaces, so disaster results.
</Para><Para>
Furthermore, it seems that <Constant>TMPDIR</Constant> must be set to a directory in the same file system in which you invoke GHC.  Otherwise you get very weird messages when you invoke GHC, such as:
<Screen>
does not exist
Action: openFile
Reason: file does not exist /Temp/ghc11068.cpp</Screen>
We think this is due to a bug in Cygwin.
</Para></Entry>
</Row>
</TBody>

</TGroup>
</InformalTable>
</Para>

<Para>
In addition, we've had problems in the past with certain environment
variables being set that seem to have bad effects on GHC. If you have
installed other systems ported from Unix, you might too. If you get weird
inexplicable failures to build GHC, then it might be worth weeding out unused
environment variables. Known culprits from the past include
<Constant>GCC_EXEC_PREFIX</Constant> and <Constant>INCLUDE</Constant>.
</Para>

</Sect3>

</Sect2>  <!-- Reqd software -->


<Sect2><Title>Installing GHC</Title>

<Para>
Download the latest GHC distribution:
</Para>

<VariableList>

<VarListEntry>
<Term>ghc-4.08 InstallShield installer, 15M: <ULink
URL="http://www.haskell.org/ghc/download.html">http</ULink>
</Term>

<ListItem>
<Para>
It is packaged up using an installer that should be familiar-looking to
Windows users.
</Para>

<Para>
Note: The cygwin support for long file names containing
spaces is not 100%, so make sure that you install ghc in a directory
that has no embedded spaces (i.e., resist the temptation to put it
in <Filename>/Program Files/</Filename>!)
</Para>

<Para>
When the installer has completed, make sure you add the location of the
ghc <Filename>bin/</Filename> directory to your path (e.g.
<Filename>/ghc/ghc-4.08/bin </Filename>).
You need to do this in order to bring the various GHC binaries into scope.
</Para>

<Para>
Note: If you haven't got perl already installed, you will have to manually
copy the <Filename>perl.exe</Filename> binary from the ghc
<Filename>bin/</Filename> into your <Filename>/bin</Filename> directory
before continuing&mdash;the installer will not currently do this.
</Para>
</ListItem>

</VarListEntry>

</VariableList>

<Para>
Make sure that you set all the environment variables described above
under Cygwin installation, including <Constant>TMPDIR</Constant>.
</Para>
<Para>
To test the fruits of your labour, try now to compile a simple
Haskell program:
</Para>

<Screen>
bash$ cat main.hs
module Main(main) where

main = putStrLn "Hello, world!"
bash$ ghc -o main main.hs
..
bash$ ./main
Hello, world!
bash$ </Screen>

<Para>
OK, assuming that worked, you're all set. Go forth and write useful
Haskell programs :-) If not, consult the installation FAQ (<XRef LinkEnd="winfaq">); if that still doesn't help then please report the problems you're experiencing (see <Xref LinkEnd="wrong">).
</Para>

<Para> Further information on using GHC under Windows can be found in <ULink
URL="http://www.dcs.gla.ac.uk/~sof/ghc-win32.html">Sigbj&oslash;rn Finne's
pages</ULink>. Note: ignore the installation instructions, which are rather
out of date; the <Emphasis>Miscellaneous</Emphasis> section at the bottom of
the page is of most interest, covering topics beyond the scope of this
manual. </Para>

</Sect2>


<Sect2 id="winfaq"><title>Installing ghc-win32 FAQ</title>

<QandASet>

<QandAEntry>

<Question>
<Para>
I'm having trouble with symlinks.
</Para>
</Question>

<Answer>
<Para>
Symlinks only work under Cygwin (<Xref LinkEnd="sec-install">), so binaries
not linked to the Cygwin DLL, in particular those built for Mingwin, will not
work with symlinks.
</Para>
</Answer>

</QandAEntry>

<QandAEntry>

<Question>
<Para>
I'm getting &ldquo;permission denied&rdquo; messages from <Command>rm</Command> or
<Command>mv</Command>.
</Para>
</Question>

<Answer>
<Para>
This can have various causes: trying to rename a directory when an Explorer
window is open on it tends to fail. Closing the window generally cures the
problem, but sometimes its cause is more mysterious, and logging off and back
on or rebooting may be the quickest cure.
</Para>
</Answer>

</QandAEntry>

<QandAEntry>

<Question>
<Para>
I get errors when trying to build GHC 4.08 with GHC 4.05.
</Para>
</Question>

<Answer> <Para> This seems to work better if you don't use
<Option>-O</Option> in <Constant>GhcHcOpts</Constant>. It's a bug in 4.05,
unfortunately. Anyway, better to install 4.08 binaries and use those.
</Para> </Answer>

</QandAEntry>

<QandAEntry>

<Question>
<Para>
My programs compile fine but do nothing when run.
</Para>
</Question>

<Answer>
<Para>
Very recent versions of the mingw package in Cygwin seem to cause this. mingwin version 20001111-1 works fine; you should be able to find it on a <ULink
URL="http://sources.redhat.com/cygwin/mirrors.html">Cygwin mirror</ULink>. Download the archive <Filename>mingw-20001111-1.tar.gz</Filename>, place it in a directory called <Filename>mingw</Filename>, place that in a directory called <Filename>latest</Filename>, then run the Cygwin installer again, choose installation from local disk, and select the directory containing <Filename>latest</Filename> as the source directory for the installation packages. You should then be able to downgrade mingw to the required version by clicking on the line in the installation window until the required version appears.
</Para>
</Answer>

</QAndAEntry>

</QandASet>

</Sect2>

</Sect1>


<Sect1 id="building-docs">
<Title>Building the documentation</Title>

<Para>
We use the DocBook DTD, which is widely used. Most shrink-wrapped distributions seem to be broken in one way or another; thanks to heroic efforts by Sven Panne and Manuel Chakravarty, we now support most of them, plus properly installed versions.
</Para>

<Para>
Instructions on installing and configuring the DocBook tools follow.
</Para>

<Sect2>
<Title>Installing the DocBook tools from RPMs</Title>

<Para> If you're using a system that can handle RedHat RPM packages, you can
probably use the <ULink
URL="http://sourceware.cygnus.com/docbook-tools/">Cygnus DocBook
tools</ULink>, which is the most shrink-wrapped SGML suite that we could
find. You need all the RPMs except for psgml (i.e.
<Filename>docbook</Filename>, <Filename>jade</Filename>,
<Filename>jadetex</Filename>, <Filename>sgmlcommon</Filename> and
<Filename>stylesheets</Filename>). Note that most of these RPMs are
architecture neutral, so are likely to be found in a
<Filename>noarch</Filename> directory. The SuSE RPMs also work; the RedHat
ones <Emphasis>don't</Emphasis> as of version 6.2, but they are easy to fix:
just make a symlink from
<Filename>/usr/lib/sgml/stylesheets/nwalsh-modular/lib/dblib.dsl</Filename> to
<Filename>/usr/lib/sgml/lib/dblib.dsl</Filename>. </Para>

</Sect2>


<Sect2>
<Title>Installing from binaries on Windows</Title>

<Para>
It's a good idea to use Norman Walsh's <ULink
URL="http://nwalsh.com/docbook/dsssl/doc/install.html">installation
notes</ULink> as a guide. You should get version 3.1 of DocBook, and note
that his file <Filename>test.sgm</Filename> won't work, as it needs version
3.0. You should unpack Jade into <Filename>\Jade</Filename>, along with the
entities, DocBook into <Filename>\docbook</Filename>, and the DocBook
stylesheets into <Filename>\docbook\stylesheets</Filename> (so they actually
end up in <Filename>\docbook\stylesheets\docbook</Filename>).
</Para>

</Sect2>


<Sect2>
<Title>Installing the DocBook tools from source</Title>

<Sect3>
<Title>Jade</Title>

<Para>
Install <ULink URL="http://openjade.sourceforge.net/">OpenJade</ULink> (Windows binaries are available as well as sources). If you want DVI, PS, or PDF then install JadeTeX from the <Filename>dsssl</Filename>
subdirectory. (If you get the error:

<Screen>
! LaTeX Error: Unknown option implicit=false' for package hyperref'.
</Screen>

your version of <Command>hyperref</Command> is out of date; download it from
CTAN (<Filename>macros/latex/contrib/supported/hyperref</Filename>), and
make it, ensuring that you have first removed or renamed your old copy. If
you start getting file not found errors when making the test for
<Command>hyperref</Command>, you can abort at that point and proceed
straight to <Command>make install</Command>, or enter them as
<Filename>../</Filename><Emphasis>filename</Emphasis>.)
</Para>

<Para>
Make links from <Filename>virtex</Filename> to <Filename>jadetex</Filename>
and <Filename>pdfvirtex</Filename> to <Filename>pdfjadetex</Filename>
(otherwise DVI, PostScript and PDF output will not work). Copy
<Filename>dsssl/*.{dtd,dsl}</Filename> and <Filename>catalog</Filename> to <Filename>/usr/[local/]lib/sgml</Filename>.
</Para>

</Sect3>

<Sect3>
<Title>DocBook and the DocBook stylesheets</Title>

<Para>
Get a Zip of <ULink
URL="http://www.oasis-open.org/docbook/sgml/3.1/index.html">DocBook</ULink> 
and install the contents in <Filename>/usr/[local/]/lib/sgml</Filename>.
</Para>

<Para>
Get the <ULink URL="http://nwalsh.com/docbook/dsssl/">DocBook
stylesheets</ULink> and install in
<Filename>/usr/[local/]lib/sgml/stylesheets</Filename> (thereby creating a
subdirectory docbook). For indexing, copy or link <Filename>collateindex.pl</Filename> from the DocBook stylesheets archive in <Filename>bin</Filename> into a directory on your <Constant>PATH</Constant>.
</Para>

<Para>
Download the <ULink
URL="http://www.oasis-open.org/cover/ISOEnts.zip">ISO
entities</ULink> into <Filename>/usr/[local/]lib/sgml</Filename>.
</Para>

</Sect3>

</Sect2>

<Sect2>
<Title>Configuring the DocBook tools</Title>

<Para>
Once the DocBook tools are installed, the configure script will detect them and set up the build system accordingly. If you have a system that isn't supported, let us know, and we'll try to help.
</Para>

</Sect2>

<Sect2>
<Title>Remaining problems</Title>

<Para>
If you install from source, you'll get a pile of warnings of the form

<Screen>DTDDECL catalog entries are not supported</Screen>

every time you build anything. These can safely be ignored, but if you find them tedious you can get rid of them by removing all the <Constant>DTDDECL</Constant> entries from <Filename>docbook.cat</Filename>.
</Para>

</Sect2>

</Sect1>

</Chapter>

<!-- Emacs stuff:
     ;;; Local Variables: ***
     ;;; mode: sgml ***
     ;;; sgml-parent-document: ("users_guide.sgml" "book" "chapter") ***
     ;;; End: ***
 -->
