<chapter id="profiling">
  <title>Profiling</Title>
  <indexterm><primary>profiling</primary>
  </indexterm>
  <indexterm><primary>cost-centre profiling</primary></indexterm>

  <Para> Glasgow Haskell comes with a time and space profiling
  system. Its purpose is to help you improve your understanding of
  your program's execution behaviour, so you can improve it.</Para>
  
  <Para> Any comments, suggestions and/or improvements you have are
  welcome.  Recommended &ldquo;profiling tricks&rdquo; would be
  especially cool! </Para>

  <para>Profiling a program is a three-step process:</para>

  <orderedlist>
    <listitem>
      <para> Re-compile your program for profiling with the
      <literal>-prof</literal> option, and probably one of the
      <literal>-auto</literal> or <literal>-auto-all</literal>
      options.  These options are described in more detail in <xref
      linkend="prof-compiler-options"> </para>
      <indexterm><primary><literal>-prof</literal></primary>
      </indexterm>
      <indexterm><primary><literal>-auto</literal></primary>
      </indexterm>
      <indexterm><primary><literal>-auto-all</literal></primary>
      </indexterm>
    </listitem>

    <listitem>
      <para> Run your program with one of the profiling options
      <literal>-p</literal> or <literal>-h</literal>.  This generates
      a file of profiling information.</para>
      <indexterm><primary><literal>-p</literal></primary><secondary>RTS
      option</secondary></indexterm>
      <indexterm><primary><literal>-h</literal></primary><secondary>RTS
      option</secondary></indexterm>
    </listitem>
      
    <listitem>
      <para> Examine the generated profiling information, using one of
      GHC's profiling tools.  The tool to use will depend on the kind
      of profiling information generated.</para>
    </listitem>
    
  </orderedlist>
  
  <sect1>
    <title>Cost centres and cost-centre stacks</title>
    
    <para>GHC's profiling system assigns <firstterm>costs</firstterm>
    to <firstterm>cost centres</firstterm>.  A cost is simply the time
    or space required to evaluate an expression.  Cost centres are
    program annotations around expressions; all costs incurred by the
    annotated expression are assigned to the enclosing cost centre.
    Furthermore, GHC will remember the stack of enclosing cost centres
    for any given expression at run-time and generate a call-graph of
    cost attributions.</para>

    <para>Let's take a look at an example:</para>

    <programlisting>
main = print (nfib 25)
nfib n = if n < 2 then 1 else nfib (n-1) + nfib (n-2)
</programlisting>

    <para>Compile and run this program as follows:</para>

    <screen>
$ ghc -prof -auto-all -o Main Main.hs
$ ./Main +RTS -p
121393
$
</screen>

    <para>When a GHC-compiled program is run with the
    <option>-p</option> RTS option, it generates a file called
    <filename>&lt;prog&gt;.prof</filename>.  In this case, the file
    will contain something like this:</para>

<screen>
          Fri May 12 14:06 2000 Time and Allocation Profiling Report  (Final)

           Main +RTS -p -RTS

        total time  =        0.14 secs   (7 ticks @ 20 ms)
        total alloc =   8,741,204 bytes  (excludes profiling overheads)

COST CENTRE          MODULE     %time %alloc

nfib                 Main       100.0  100.0


                                              individual     inherited
COST CENTRE              MODULE         scc  %time %alloc   %time %alloc

MAIN                     MAIN             0    0.0   0.0    100.0 100.0
 main                    Main             0    0.0   0.0      0.0   0.0
 CAF                     PrelHandle       3    0.0   0.0      0.0   0.0
 CAF                     PrelAddr         1    0.0   0.0      0.0   0.0
 CAF                     Main             6    0.0   0.0    100.0 100.0
  main                   Main             1    0.0   0.0    100.0 100.0
   nfib                  Main        242785  100.0 100.0    100.0 100.0
</screen>


    <para>The first part of the file gives the program name and
    options, and the total time and total memory allocation measured
    during the run of the program (note that the total memory
    allocation figure isn't the same as the amount of
    <emphasis>live</emphasis> memory needed by the program at any one
    time; the latter can be determined using heap profiling, which we
    will describe shortly).</para>

    <para>The second part of the file is a break-down by cost centre
    of the most costly functions in the program.  In this case, there
    was only one significant function in the program, namely
    <function>nfib</function>, and it was responsible for 100&percnt;
    of both the time and allocation costs of the program.</para>

    <para>The third and final section of the file gives a profile
    break-down by cost-centre stack.  This is roughly a call-graph
    profile of the program.  In the example above, it is clear that
    the costly call to <function>nfib</function> came from
    <function>main</function>.</para>

    <para>The time and allocation incurred by a given part of the
    program is displayed in two ways: &ldquo;individual&rdquo;, which
    are the costs incurred by the code covered by this cost centre
    stack alone, and &ldquo;inherited&rdquo;, which includes the costs
    incurred by all the children of this node.</para>

    <para>The usefulness of cost-centre stacks is better demonstrated
    by  modifying the example slightly:</para>

    <programlisting>
main = print (f 25 + g 25)
f n  = nfib n
g n  = nfib (n `div` 2)
nfib n = if n < 2 then 1 else nfib (n-1) + nfib (n-2)
</programlisting>

    <para>Compile and run this program as before, and take a look at
    the new profiling results:</para>

<screen>
COST CENTRE              MODULE         scc  %time %alloc   %time %alloc

MAIN                     MAIN             0    0.0   0.0    100.0 100.0
 main                    Main             0    0.0   0.0      0.0   0.0
 CAF                     PrelHandle       3    0.0   0.0      0.0   0.0
 CAF                     PrelAddr         1    0.0   0.0      0.0   0.0
 CAF                     Main             9    0.0   0.0    100.0 100.0
  main                   Main             1    0.0   0.0    100.0 100.0
   g                     Main             1    0.0   0.0      0.0   0.2
    nfib                 Main           465    0.0   0.2      0.0   0.2
   f                     Main             1    0.0   0.0    100.0  99.8
    nfib                 Main        242785  100.0  99.8    100.0  99.8
</screen>

    <para>Now although we had two calls to <function>nfib</function>
    in the program, it is immediately clear that it was the call from
    <function>f</function> which took all the time.</para>

    <para>The actual meaning of the various columns in the output is:</para>

    <variablelist>
      <varlistentry>
	<term>entries</term>
	<listitem>
	  <para>The number of times this particular point in the call
	  graph was entered.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>individual &percnt;time</term>
	<listitem>
	  <para>The percentage of the total run time of the program
	  spent at this point in the call graph.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>individual &percnt;alloc</term>
	<listitem>
	  <para>The percentage of the total memory allocations
	  (excluding profiling overheads) of the program made by this
	  call.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>inherited &percnt;time</term>
	<listitem>
	  <para>The percentage of the total run time of the program
	  spent below this point in the call graph.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>inherited &percnt;alloc</term>
	<listitem>
	  <para>The percentage of the total memory allocations
	  (excluding profiling overheads) of the program made by this
	  call and all of its sub-calls.</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para>In addition you can use the <Option>-P</Option> RTS option
    <indexterm><primary><option>-P</option></primary></indexterm> to
    get the following additional information:</para>

    <variablelist>
      <varlistentry>
	<term><literal>ticks</literal></term>
	<listitem>
	  <Para>The raw number of time &ldquo;ticks&rdquo; which were
          attributed to this cost-centre; from this, we get the
          <literal>&percnt;time</literal> figure mentioned
          above.</Para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><literal>bytes</literal></term>
	<listItem>
	  <Para>Number of bytes allocated in the heap while in this
          cost-centre; again, this is the raw number from which we get
          the <literal>&percnt;alloc</literal> figure mentioned
          above.</Para>
	</listItem>
      </varListEntry>
    </variablelist>

    <para>What about recursive functions, and mutually recursive
    groups of functions?  Where are the costs attributed?  Well,
    although GHC does keep information about which groups of functions
    called each other recursively, this information isn't displayed in
    the basic time and allocation profile, instead the call-graph is
    flattened into a tree.  The XML profiling tool (described in <xref
    linkend="prof-xml-tool">) will be able to display real loops in
    the call-graph.</para>

    <sect2><title>Inserting cost centres by hand</title>

      <para>Cost centres are just program annotations.  When you say
      <option>-auto-all</option> to the compiler, it automatically
      inserts a cost centre annotation around every top-level function
      in your program, but you are entirely free to add the cost
      centre annotations yourself.</para>

      <para>The syntax of a cost centre annotation is</para>

      <programlisting>
     _scc_ "name" &lt;expression&gt;
</programlisting>

      <para>where <literal>"name"</literal> is an aribrary string,
      that will become the name of your cost centre as it appears
      in the profiling output, and
      <literal>&lt;expression&gt;</literal> is any Haskell
      expression.  An <literal>_scc_</literal> annotation extends as
      far to the right as possible when parsing.</para>

    </sect2>

    <sect2 id="prof-rules">
      <title>Rules for attributing costs</title>

      <para>The cost of evaluating any expression in your program is
      attributed to a cost-centre stack using the following rules:</para>

      <itemizedlist>
	<listitem>
	  <para>If the expression is part of the
	  <firstterm>one-off</firstterm> costs of evaluating the
	  enclosing top-level definition, then costs are attributed to
	  the stack of lexically enclosing <literal>_scc_</literal>
	  annotations on top of the special <literal>CAF</literal>
	  cost-centre. </para>
	</listitem>

	<listitem>
	  <para>Otherwise, costs are attributed to the stack of
	  lexically-enclosing <literal>_scc_</literal> annotations,
	  appended to the cost-centre stack in effect at the
	  <firstterm>call site</firstterm> of the current top-level
	  definition<footnote> <para>The call-site is just the place
	  in the source code which mentions the particular function or
	  variable.</para></footnote>.  Notice that this is a recursive
	  definition.</para>
	</listitem>
      </itemizedlist>

      <para>What do we mean by one-off costs?  Well, Haskell is a lazy
      language, and certain expressions are only ever evaluated once.
      For example, if we write:</para>

      <programlisting>
x = nfib 25
</programlisting>

      <para>then <varname>x</varname> will only be evaluated once (if
      at all), and subsequent demands for <varname>x</varname> will
      immediately get to see the cached result.  The definition
      <varname>x</varname> is called a CAF (Constant Applicative
      Form), because it has no arguments.</para>

      <para>For the purposes of profiling, we say that the expression
      <literal>nfib 25</literal> belongs to the one-off costs of
      evaluating <varname>x</varname>.</para>

      <para>Since one-off costs aren't strictly speaking part of the
      call-graph of the program, they are attributed to a special
      top-level cost centre, <literal>CAF</literal>.  There may be one
      <literal>CAF</literal> cost centre for each module (the
      default), or one for each top-level definition with any one-off
      costs (this behaviour can be selected by giving GHC the
      <option>-caf-all</option> flag).</para>

      <indexterm><primary><literal>-caf-all</literal></primary>
      </indexterm>

      <para>If you think you have a weird profile, or the call-graph
      doesn't look like you expect it to, feel free to send it (and
      your program) to us at
      <email>glasgow-haskell-bugs@haskell.org</email>.</para>

    </sect2>
  </sect1>

  <sect1 id="prof-heap">
    <title>Profiling memory usage</title>

    <para>In addition to profiling the time and allocation behaviour
    of your program, you can also generate a graph of its memory usage
    over time.  This is useful for detecting the causes of
    <firstterm>space leaks</firstterm>, when your program holds on to
    more memory at run-time that it needs to.  Space leaks lead to
    longer run-times due to heavy garbage collector ativity, and may
    even cause the program to run out of memory altogether.</para>

    <para>To generate a heap profile from your program, compile it as
    before, but this time run it with the <option>-h</option> runtime
    option.  This generates a file
    <filename>&lt;prog&gt;.hp</filename> file, which you then process
    with <command>hp2ps</command> to produce a Postscript file
    <filename>&lt;prog&gt;.ps</filename>.  The Postscript file can be
    viewed with something like <command>ghostview</command>, or
    printed out on a Postscript-compatible printer.</para>

    <para>For the RTS options that control the kind of heap profile
    generated, see <xref linkend="prof-rts-options">.  Details on the
    usage of the <command>hp2ps</command> program are given in <xref
    linkend="hp2ps"></para>

  </sect1>

  <sect1 id="prof-xml-tool">
    <title>Graphical time/allocation profile</title>

    <para>You can view the time and allocation profiling graph of your
    program graphically, using <command>ghcprof</command>.  This is a
    new tool with GHC 4.08, and will eventually be the de-facto
    standard way of viewing GHC profiles.</para>

    <para>To run <command>ghcprof</command>, you need
    <productname>daVinci</productname> installed, which can be
    obtained from <ulink
    url="http://www.tzi.de/~davinci/"><citetitle>The Graph
    Visualisation Tool daVinci</citetitle></ulink>.  Install one of
    the binary
    distributions<footnote><para><productname>daVinci</productname> is
    sadly not open-source :-(.</para></footnote>, and set your
    <envar>DAVINCIHOME</envar> environment variable to point to the
    installation directory.</para>

    <para><command>ghcprof</command> uses an XML-based profiling log
    format, and you therefore need to run your program with a
    different option: <option>-px</option>.  The file generated is
    still called <filename>&lt;prog&gt;.prof</filename>.  To see the
    profile, run <command>ghcprof</command> like this:</para>

    <indexterm><primary><option>-px</option></primary></indexterm>

<screen>
$ ghcprof &lt;prog&gt;.prof
</screen>

    <para>which should pop up a window showing the call-graph of your
    program in glorious detail.  More information on using
    <command>ghcprof</command> can be found at <ulink
    url="http://www.dcs.warwick.ac.uk/people/academic/Stephen.Jarvis/profiler/index.html"><citetitle>The
    Cost-Centre Stack Profiling Tool for
    GHC</citetitle></ulink>.</para>

  </sect1>

  <sect1 id="prof-compiler-options">
    <title>Compiler options for profiling</title>

    <indexterm><primary>profiling</primary><secondary>options</secondary></indexterm>
    <indexterm><primary>options</primary><secondary>for profiling</secondary></indexterm>

    <Para> To make use of the cost centre profiling system
    <Emphasis>all</Emphasis> modules must be compiled and linked with
    the <Option>-prof</Option> option. Any
    <Function>&lowbar;scc&lowbar;</Function> constructs you've put in
    your source will spring to life.</Para> 

    <indexterm><primary><literal>-prof</literal></primary></indexterm>

    <Para> Without a <Option>-prof</Option> option, your
    <Function>&lowbar;scc&lowbar;</Function>s are ignored; so you can
    compiled <Function>&lowbar;scc&lowbar;</Function>-laden code
    without changing it.</Para>
    
    <Para>There are a few other profiling-related compilation options.
    Use them <Emphasis>in addition to</Emphasis>
    <Option>-prof</Option>.  These do not have to be used consistently
    for all modules in a program.</Para>

    <variableList>

      <varListEntry>
	<term><Option>-auto</Option>:</Term>
	<indexterm><primary><literal>-auto</literal></primary></indexterm>
	<indexterm><primary>cost centres</primary><secondary>automatically inserting</secondary></indexterm>
	<listItem>
	  <Para> GHC will automatically add
          <Function>&lowbar;scc&lowbar;</Function> constructs for all
          top-level, exported functions.</Para>
	</listItem>
      </varListEntry>
      
      <varListEntry>
	<term><Option>-auto-all</Option>:</Term>
	<indexterm><primary><literal>-auto-all</literal></primary></indexterm>
	<listItem>
	  <Para> <Emphasis>All</Emphasis> top-level functions,
	  exported or not, will be automatically
	  <Function>&lowbar;scc&lowbar;</Function>'d.</Para>
	</listItem>
      </varListEntry>

      <varListEntry>
	<term><Option>-caf-all</Option>:</Term>
	<indexterm><primary><literal>-caf-all</literal></primary></indexterm>
	<listItem>
	  <Para> The costs of all CAFs in a module are usually
	  attributed to one &ldquo;big&rdquo; CAF cost-centre. With
	  this option, all CAFs get their own cost-centre.  An
	  &ldquo;if all else fails&rdquo; option&hellip;</Para>
	</listItem>
      </varListEntry>

      <varListEntry>
	<term><Option>-ignore-scc</Option>:</Term>
	<indexterm><primary><literal>-ignore-scc</literal></primary></indexterm>
	<listItem>
	  <Para>Ignore any <Function>&lowbar;scc&lowbar;</Function>
          constructs, so a module which already has
          <Function>&lowbar;scc&lowbar;</Function>s can be compiled
          for profiling with the annotations ignored.</Para>
	</listItem>
      </varListEntry>

    </variableList>

  </sect1>

  <sect1 id="prof-rts-options">
    <title>Runtime options for profiling</Title>

    <indexterm><primary>profiling RTS options</primary></indexterm>
    <indexterm><primary>RTS options, for profiling</primary></indexterm>

    <Para>It isn't enough to compile your program for profiling with
    <Option>-prof</Option>!</Para>

    <Para>When you <Emphasis>run</Emphasis> your profiled program, you
    must tell the runtime system (RTS) what you want to profile (e.g.,
    time and/or space), and how you wish the collected data to be
    reported.  You also may wish to set the sampling interval used in
    time profiling.</Para>

    <Para>Executive summary: <command>./a.out +RTS -pT</command>
    produces a time profile in <Filename>a.out.prof</Filename>;
    <command>./a.out +RTS -hC</command> produces space-profiling info
    which can be mangled by <command>hp2ps</command> and viewed with
    <command>ghostview</command> (or equivalent).</Para>

    <Para>Profiling runtime flags are passed to your program between
    the usual <Option>+RTS</Option> and <Option>-RTS</Option>
    options.</Para>

    <variableList>
      
      <varListEntry>
	<term><Option>-p</Option> or <Option>-P</Option>:</Term>
	<indexterm><primary><option>-p</option></primary></indexterm>
	<indexterm><primary><option>-P</option></primary></indexterm>
	<indexterm><primary>time profile</primary></indexterm>
	<listItem>
	  <Para>The <Option>-p</Option> option produces a standard
          <Emphasis>time profile</Emphasis> report.  It is written
          into the file
          <Filename>&lt;program&gt;.prof</Filename>.</Para>

	  <Para>The <Option>-P</Option> option produces a more
          detailed report containing the actual time and allocation
          data as well.  (Not used much.)</Para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-px</option>:</term>
	<indexterm><primary><option>-px</option></primary></indexterm>
	<listitem>
	  <para>The <option>-px</option> option generates profiling
	  information in the XML format understood by our new
	  profiling tool, see <xref linkend="prof-xml-tool">.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><Option>-i&lt;secs&gt;</Option>:</Term>
	<indexterm><primary><option>-i</option></primary></indexterm>
	<listItem>
	  <Para> Set the profiling (sampling) interval to
          <literal>&lt;secs&gt;</literal> seconds (the default is
          1&nbsp;second).  Fractions are allowed: for example
          <Option>-i0.2</Option> will get 5 samples per second.  This
          only affects heap profiling; time profiles are always
          sampled on a 1/50 second frequency.</Para>
	</listItem>
      </varlistentry>

      <varlistentry>
	<term><Option>-h&lt;break-down&gt;</Option>:</Term>
	<indexterm><primary><option>-h&lt;break-down&gt</option></primary></indexterm>
	<indexterm><primary>heap profile</primary></indexterm>
	<listItem>
	  <Para>Produce a detailed <Emphasis>heap profile</Emphasis>
          of the heap occupied by live closures. The profile is
          written to the file <Filename>&lt;program&gt;.hp</Filename>
          from which a PostScript graph can be produced using
          <command>hp2ps</command> (see <XRef
          LinkEnd="hp2ps">).</Para>

	  <Para>The heap space profile may be broken down by different
	  criteria:</para>

	  <variableList>

	    <varListEntry>
	      <term><Option>-hC</Option>:</Term>
	      <listItem>
		<Para>cost centre which produced the closure (the
		default).</Para>
	      </listItem>
	    </varListEntry>

	    <varListEntry>
	      <term><Option>-hM</Option>:</Term>
	      <listItem>
		<Para>cost centre module which produced the
		closure.</Para>
	      </listItem>
	    </varListEntry>

	    <varListEntry>
	      <term><Option>-hD</Option>:</Term>
	      <listItem>
		<Para>closure description&mdash;a string describing
		the closure.</Para>
	      </listItem>
	    </varListEntry>

	    <varListEntry>
	      <term><Option>-hY</Option>:</Term>
	      <listItem>
		<Para>closure type&mdash;a string describing the
		closure's type.</Para>
	      </listItem>
	    </varListEntry>
	  </variableList>

	</listItem>
      </varListEntry>

      <varlistentry>
	<term><option>-hx</option>:</term>
	<indexterm><primary><option>-hx</option></primary></indexterm>
	<listitem>
	  <para>The <option>-hx</option> option generates heap
	  profiling information in the XML format understood by our
	  new profiling tool (NOTE: heap profiling with the new tool
	  is not yet working!  Use <command>hp2ps</command>-style heap
	  profiling for the time being).</para>
	</listitem>
      </varlistentry>

    </variableList>
    
  </sect1>

  <sect1 id="hp2ps">
    <title><command>hp2ps</command>--heap profile to PostScript</title>

    <indexterm><primary><command>hp2ps</command></primary></indexterm>
    <indexterm><primary>heap profiles</primary></indexterm>
    <indexterm><primary>postscript, from heap profiles</primary></indexterm>
    <indexterm><primary><option>-h&lt;break-down&gt;</option></primary></indexterm>
    
    <para>Usage:</para>
    
<screen>
hp2ps [flags] [&lt;file&gt;[.hp]]
</screen>

    <para>The program
    <command>hp2ps</command><indexterm><primary>hp2ps
    program</primary></indexterm> converts a heap profile as produced
    by the <Option>-h&lt;break-down&gt;</Option> runtime option into a
    PostScript graph of the heap profile. By convention, the file to
    be processed by <command>hp2ps</command> has a
    <filename>.hp</filename> extension. The PostScript output is
    written to <filename>&lt;file&gt;@.ps</filename>. If
    <filename>&lt;file&gt;</filename> is omitted entirely, then the
    program behaves as a filter.</para>

    <para><command>hp2ps</command> is distributed in
    <filename>ghc/utils/hp2ps</filename> in a GHC source
    distribution. It was originally developed by Dave Wakeling as part
    of the HBC/LML heap profiler.</para>

    <para>The flags are:</para>

    <variableList>
      
      <varListEntry>
	<term><Option>-d</Option></Term>
	<listItem>
	  <para>In order to make graphs more readable,
          <command>hp2ps</command> sorts the shaded bands for each
          identifier. The default sort ordering is for the bands with
          the largest area to be stacked on top of the smaller ones.
          The <Option>-d</Option> option causes rougher bands (those
          representing series of values with the largest standard
          deviations) to be stacked on top of smoother ones.</para>
	</listItem>
      </varListEntry>

      <varListEntry>
	<term><Option>-b</Option></Term>
	<listItem>
	  <para>Normally, <command>hp2ps</command> puts the title of
          the graph in a small box at the top of the page. However, if
          the JOB string is too long to fit in a small box (more than
          35 characters), then <command>hp2ps</command> will choose to
          use a big box instead.  The <Option>-b</Option> option
          forces <command>hp2ps</command> to use a big box.</para>
	</listItem>
      </varListEntry>

      <varListEntry>
	<term><Option>-e&lt;float&gt;[in&verbar;mm&verbar;pt]</Option></Term>
	<listItem>
	  <para>Generate encapsulated PostScript suitable for
          inclusion in LaTeX documents.  Usually, the PostScript graph
          is drawn in landscape mode in an area 9 inches wide by 6
          inches high, and <command>hp2ps</command> arranges for this
          area to be approximately centred on a sheet of a4 paper.
          This format is convenient of studying the graph in detail,
          but it is unsuitable for inclusion in LaTeX documents.  The
          <Option>-e</Option> option causes the graph to be drawn in
          portrait mode, with float specifying the width in inches,
          millimetres or points (the default).  The resulting
          PostScript file conforms to the Encapsulated PostScript
          (EPS) convention, and it can be included in a LaTeX document
          using Rokicki's dvi-to-PostScript converter
          <command>dvips</command>.</para>
	</listItem>
      </varListEntry>

      <varListEntry>
	<term><Option>-g</Option></Term>
	<listItem>
	  <para>Create output suitable for the <command>gs</command>
          PostScript previewer (or similar). In this case the graph is
          printed in portrait mode without scaling. The output is
          unsuitable for a laser printer.</para>
	</listItem>
      </varListEntry>

      <varListEntry>
	<term><Option>-l</Option></Term>
	<listItem>
	  <para>Normally a profile is limited to 20 bands with
          additional identifiers being grouped into an
          <literal>OTHER</literal> band. The <Option>-l</Option> flag
          removes this 20 band and limit, producing as many bands as
          necessary. No key is produced as it won't fit!. It is useful
          for creation time profiles with many bands.</para>
	</listItem>
      </varListEntry>

      <varListEntry>
	<term><Option>-m&lt;int&gt;</Option></Term>
	<listItem>
	  <para>Normally a profile is limited to 20 bands with
          additional identifiers being grouped into an
          <literal>OTHER</literal> band. The <Option>-m</Option> flag
          specifies an alternative band limit (the maximum is
          20).</para>

	  <para><Option>-m0</Option> requests the band limit to be
          removed. As many bands as necessary are produced. However no
          key is produced as it won't fit! It is useful for displaying
          creation time profiles with many bands.</para>
	</listItem>
      </varListEntry>

      <varListEntry>
	<term><Option>-p</Option></Term>
	<listItem>
	  <para>Use previous parameters. By default, the PostScript
          graph is automatically scaled both horizontally and
          vertically so that it fills the page.  However, when
          preparing a series of graphs for use in a presentation, it
          is often useful to draw a new graph using the same scale,
          shading and ordering as a previous one. The
          <Option>-p</Option> flag causes the graph to be drawn using
          the parameters determined by a previous run of
          <command>hp2ps</command> on <filename>file</filename>. These
          are extracted from <filename>file@.aux</filename>.</para>
	</listItem>
      </varListEntry>

      <varListEntry>
	<term><Option>-s</Option></Term>
	<listItem>
	  <para>Use a small box for the title.</para>
	</listItem>
      </varListEntry>
      
      <varListEntry>
	<term><Option>-t&lt;float&gt;</Option></Term>
	<listItem>
	  <para>Normally trace elements which sum to a total of less
          than 1&percnt; of the profile are removed from the
          profile. The <option>-t</option> option allows this
          percentage to be modified (maximum 5&percnt;).</para>

	  <para><Option>-t0</Option> requests no trace elements to be
          removed from the profile, ensuring that all the data will be
          displayed.</para>
	</listItem>
      </varListEntry>

      <varListEntry>
	<term><Option>-c</Option></Term>
	<listItem>
	  <para>Generate colour output.</para>
	</listItem>
      </varListEntry>
      
      <varListEntry>
	<term><Option>-y</Option></Term>
	<listItem>
	  <para>Ignore marks.</para>
	</listItem>
      </varListEntry>
      
      <varListEntry>
	<term><Option>-?</Option></Term>
	<listItem>
	  <para>Print out usage information.</para>
	</listItem>
      </varListEntry>
    </variableList>
  </sect1>

  <sect1 id="ticky-ticky">
    <title>Using &ldquo;ticky-ticky&rdquo; profiling (for implementors)</Title>
    <indexterm><primary>ticky-ticky profiling</primary></indexterm>

    <para>(ToDo: document properly.)</para>

    <para>It is possible to compile Glasgow Haskell programs so that
    they will count lots and lots of interesting things, e.g., number
    of updates, number of data constructors entered, etc., etc.  We
    call this &ldquo;ticky-ticky&rdquo;
    profiling,<indexterm><primary>ticky-ticky
    profiling</primary></indexterm> <indexterm><primary>profiling,
    ticky-ticky</primary></indexterm> because that's the sound a Sun4
    makes when it is running up all those counters
    (<Emphasis>slowly</Emphasis>).</para>

    <para>Ticky-ticky profiling is mainly intended for implementors;
    it is quite separate from the main &ldquo;cost-centre&rdquo;
    profiling system, intended for all users everywhere.</para>

    <para>To be able to use ticky-ticky profiling, you will need to
    have built appropriate libraries and things when you made the
    system.  See &ldquo;Customising what libraries to build,&rdquo; in
    the installation guide.</para>

    <para>To get your compiled program to spit out the ticky-ticky
    numbers, use a <Option>-r</Option> RTS
    option<indexterm><primary>-r RTS option</primary></indexterm>.
    See <XRef LinkEnd="runtime-control">.</para>

    <para>Compiling your program with the <Option>-ticky</Option>
    switch yields an executable that performs these counts.  Here is a
    sample ticky-ticky statistics file, generated by the invocation
    <command>foo +RTS -rfoo.ticky</command>.</para>

<screen>
 foo +RTS -rfoo.ticky


ALLOCATIONS: 3964631 (11330900 words total: 3999476 admin, 6098829 goods, 1232595 slop)
                                total words:        2     3     4     5    6+
  69647 (  1.8%) function values                 50.0  50.0   0.0   0.0   0.0
2382937 ( 60.1%) thunks                           0.0  83.9  16.1   0.0   0.0
1477218 ( 37.3%) data values                     66.8  33.2   0.0   0.0   0.0
      0 (  0.0%) big tuples
      2 (  0.0%) black holes                      0.0 100.0   0.0   0.0   0.0
      0 (  0.0%) prim things
  34825 (  0.9%) partial applications             0.0   0.0   0.0 100.0   0.0
      2 (  0.0%) thread state objects             0.0   0.0   0.0   0.0 100.0

Total storage-manager allocations: 3647137 (11882004 words)
        [551104 words lost to speculative heap-checks]

STACK USAGE:

ENTERS: 9400092  of which 2005772 (21.3%) direct to the entry code
                  [the rest indirected via Node's info ptr]
1860318 ( 19.8%) thunks
3733184 ( 39.7%) data values
3149544 ( 33.5%) function values
                  [of which 1999880 (63.5%) bypassed arg-satisfaction chk]
 348140 (  3.7%) partial applications
 308906 (  3.3%) normal indirections
      0 (  0.0%) permanent indirections

RETURNS: 5870443
2137257 ( 36.4%) from entering a new constructor
                  [the rest from entering an existing constructor]
2349219 ( 40.0%) vectored [the rest unvectored]

RET_NEW:         2137257:  32.5% 46.2% 21.3%  0.0%  0.0%  0.0%  0.0%  0.0%  0.0%
RET_OLD:         3733184:   2.8% 67.9% 29.3%  0.0%  0.0%  0.0%  0.0%  0.0%  0.0%
RET_UNBOXED_TUP:       2:   0.0%  0.0%100.0%  0.0%  0.0%  0.0%  0.0%  0.0%  0.0%

RET_VEC_RETURN : 2349219:   0.0%  0.0%100.0%  0.0%  0.0%  0.0%  0.0%  0.0%  0.0%

UPDATE FRAMES: 2241725 (0 omitted from thunks)
SEQ FRAMES:    1
CATCH FRAMES:  1
UPDATES: 2241725
      0 (  0.0%) data values
  34827 (  1.6%) partial applications
                  [2 in place, 34825 allocated new space]
2206898 ( 98.4%) updates to existing heap objects (46 by squeezing)
UPD_CON_IN_NEW:         0:       0      0      0      0      0      0      0      0      0
UPD_PAP_IN_NEW:     34825:       0      0      0  34825      0      0      0      0      0

NEW GEN UPDATES: 2274700 ( 99.9%)

OLD GEN UPDATES: 1852 (  0.1%)

Total bytes copied during GC: 190096

**************************************************
3647137 ALLOC_HEAP_ctr
11882004 ALLOC_HEAP_tot
  69647 ALLOC_FUN_ctr
  69647 ALLOC_FUN_adm
  69644 ALLOC_FUN_gds
  34819 ALLOC_FUN_slp
  34831 ALLOC_FUN_hst_0
  34816 ALLOC_FUN_hst_1
      0 ALLOC_FUN_hst_2
      0 ALLOC_FUN_hst_3
      0 ALLOC_FUN_hst_4
2382937 ALLOC_UP_THK_ctr
      0 ALLOC_SE_THK_ctr
 308906 ENT_IND_ctr
      0 E!NT_PERM_IND_ctr requires +RTS -Z
[... lots more info omitted ...]
      0 GC_SEL_ABANDONED_ctr
      0 GC_SEL_MINOR_ctr
      0 GC_SEL_MAJOR_ctr
      0 GC_FAILED_PROMOTION_ctr
  47524 GC_WORDS_COPIED_ctr
</screen>

    <para>The formatting of the information above the row of asterisks
    is subject to change, but hopefully provides a useful
    human-readable summary.  Below the asterisks <Emphasis>all
    counters</Emphasis> maintained by the ticky-ticky system are
    dumped, in a format intended to be machine-readable: zero or more
    spaces, an integer, a space, the counter name, and a newline.</para>

    <para>In fact, not <Emphasis>all</Emphasis> counters are
    necessarily dumped; compile- or run-time flags can render certain
    counters invalid.  In this case, either the counter will simply
    not appear, or it will appear with a modified counter name,
    possibly along with an explanation for the omission (notice
    <literal>ENT&lowbar;PERM&lowbar;IND&lowbar;ctr</literal> appears
    with an inserted <literal>!</literal> above).  Software analysing
    this output should always check that it has the counters it
    expects.  Also, beware: some of the counters can have
    <Emphasis>large</Emphasis> values!</para>

  </sect1>

</chapter>

<!-- Emacs stuff:
     ;;; Local Variables: ***
     ;;; mode: sgml ***
     ;;; sgml-parent-document: ("users_guide.sgml" "book" "chapter") ***
     ;;; End: ***
 -->
