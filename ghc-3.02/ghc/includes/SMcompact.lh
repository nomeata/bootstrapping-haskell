%************************************************************************
%*									*
\section[SMcompact]{Code labels for single-space compacting collectors}
%*									*
%************************************************************************
Multi-slurp protection:
\begin{code}
#ifndef SMCOMPACT_H
#define SMCOMPACT_H
\end{code}
First, some potentially non-portable macros for marking locations.
During compacting, we use the info pointer field of a closure to 
maintain a list of locations that point to the closure.  The actual
info pointer is saved at the end of the list.  When we traverse this
list, we need to be able to distinguish the info pointer from an
arbitrary location (possibly in the heap, but possibly elsewhere).
So, we set a bit on the locations as we add them to the list.
This has to be a bit that is always going to be clear on an info
pointer.  Since info tables are typically word-aligned, we hope that
the 0 bit will suffice for most implementations.

\begin{code}

#define CLEAR_PTR_BIT		(0)

#define MARKED_LOCATION_MASK	(1L<<CLEAR_PTR_BIT)

#define MARK_LOCATION(loc)	(((W_)(loc)) | MARKED_LOCATION_MASK)
#define UNMARK_LOCATION(loc)	((P_)(((W_)(loc)) & ~MARKED_LOCATION_MASK))

#define MARKED_LOCATION(loc)	((((W_)(loc)) & MARKED_LOCATION_MASK) != 0)

\end{code}

A dynamic closure has to be recognizable even after it has lost its
info pointer as a result of the linking described above.  We first test
to see if its info pointer is a marked location (in which case, it must
be a dynamic closure), and if it isn't, we check the rep table to see
if it's not static.

\begin{code}

#define DYNAMIC_CLOSURE(c)  (MARKED_LOCATION(INFO_PTR(c)) || !IS_STATIC(INFO_PTR(c)))

\end{code}

\begin{code}

typedef I_ (StgScanFun)(STG_NO_ARGS);
typedef I_ (*StgScanPtr)(STG_NO_ARGS);

#ifdef TICKY_TICKY
extern StgScanFun _ScanLink_0_0;
#endif
extern StgScanFun _ScanLink_1_0;
extern StgScanFun _ScanLink_2_0;
extern StgScanFun _ScanLink_3_0;
extern StgScanFun _ScanLink_4_0;
extern StgScanFun _ScanLink_5_0;

extern StgScanFun _ScanLink_2_1; /* 1 ptr,  1 non-ptr  */
extern StgScanFun _ScanLink_3_1; /* 1 ptr,  2 non-ptrs */
extern StgScanFun _ScanLink_3_2; /* 2 ptrs, 1 non-ptr  */

extern StgScanFun _ScanLink_1_1;
extern StgScanFun _ScanLink_2_2;
extern StgScanFun _ScanLink_3_3;
extern StgScanFun _ScanLink_4_4;
extern StgScanFun _ScanLink_5_5;
extern StgScanFun _ScanLink_6_6;
extern StgScanFun _ScanLink_7_7;
extern StgScanFun _ScanLink_8_8;
extern StgScanFun _ScanLink_9_9;
extern StgScanFun _ScanLink_10_10;
extern StgScanFun _ScanLink_11_11;
extern StgScanFun _ScanLink_12_12;

extern StgScanFun _ScanLink_S_N;
extern StgScanFun _ScanLink_Dyn;
extern StgScanFun _ScanLink_Tuple;
extern StgScanFun _ScanLink_Data;
extern StgScanFun _ScanLink_MuTuple;

#if defined(PROFILING) || defined(TICKY_TICKY)
extern StgScanFun _ScanLink_PI;
#endif

#if defined(PAR) || defined(GRAN)
extern StgScanFun _ScanLink_RBH_2_1;
extern StgScanFun _ScanLink_RBH_3_1;
extern StgScanFun _ScanLink_RBH_3_3;
extern StgScanFun _ScanLink_RBH_4_1;
extern StgScanFun _ScanLink_RBH_4_4;
extern StgScanFun _ScanLink_RBH_5_1;
extern StgScanFun _ScanLink_RBH_5_5;
extern StgScanFun _ScanLink_RBH_6_6;
extern StgScanFun _ScanLink_RBH_7_7;
extern StgScanFun _ScanLink_RBH_8_8;
extern StgScanFun _ScanLink_RBH_9_9;
extern StgScanFun _ScanLink_RBH_10_10;
extern StgScanFun _ScanLink_RBH_11_11;
extern StgScanFun _ScanLink_RBH_12_12;
extern StgScanFun _ScanLink_RBH_N;
extern StgScanFun _ScanLink_FetchMe;
extern StgScanFun _ScanLink_BF;

extern StgScanFun _ScanMove_RBH_2;
extern StgScanFun _ScanMove_RBH_3;
extern StgScanFun _ScanMove_RBH_4;
extern StgScanFun _ScanMove_RBH_5;
extern StgScanFun _ScanMove_RBH_6;
extern StgScanFun _ScanMove_RBH_7;
extern StgScanFun _ScanMove_RBH_8;
extern StgScanFun _ScanMove_RBH_9;
extern StgScanFun _ScanMove_RBH_10;
extern StgScanFun _ScanMove_RBH_11;
extern StgScanFun _ScanMove_RBH_12;

extern StgScanFun _ScanMove_RBH_S;
#endif /* PAR || GRAN */

#if !defined(PAR) || defined(GRAN)
extern StgScanFun _ScanLink_ForeignObj;
#endif

extern StgScanFun _ScanLink_BH_N;
extern StgScanFun _ScanLink_BH_U;

#if defined(CONCURRENT)
extern StgScanFun _ScanLink_StkO;
extern StgScanFun _ScanLink_TSO;
extern StgScanFun _ScanLink_BQ;
#endif

#ifdef TICKY_TICKY
extern StgScanFun _ScanMove_0;
#endif
extern StgScanFun _ScanMove_1;
extern StgScanFun _ScanMove_2;
extern StgScanFun _ScanMove_3;
extern StgScanFun _ScanMove_4;
extern StgScanFun _ScanMove_5;
extern StgScanFun _ScanMove_6;
extern StgScanFun _ScanMove_7;
extern StgScanFun _ScanMove_8;
extern StgScanFun _ScanMove_9;
extern StgScanFun _ScanMove_10;
extern StgScanFun _ScanMove_11;
extern StgScanFun _ScanMove_12;

extern StgScanFun _ScanMove_S;
extern StgScanFun _ScanMove_Dyn;
extern StgScanFun _ScanMove_Tuple;
extern StgScanFun _ScanMove_Data;
extern StgScanFun _ScanMove_MuTuple;

#if defined(PROFILING) || defined(TICKY_TICKY)
extern StgScanFun _ScanMove_PI;
#endif

#ifndef PAR
extern StgScanFun _ScanMove_ForeignObj;
#endif /* !PAR */

extern StgScanFun _ScanMove_ImmuTuple;
extern StgScanFun _ScanMove_BH_N;
extern StgScanFun _ScanMove_BH_U;

#if defined(CONCURRENT)
extern StgScanFun _ScanMove_StkO;
extern StgScanFun _ScanMove_TSO;
extern StgScanFun _ScanMove_BQ;
#if defined(PAR)
extern StgScanFun _ScanMove_FetchMe;
extern StgScanFun _ScanMove_BF;
#endif
#endif
\end{code}

End of multi-slurp protection:
\begin{code}
#endif /* SMCOMPACT_H */
\end{code}
